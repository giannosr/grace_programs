fun main () : nothing
	
	$ Levenstein distance using loop instead of recursion. Also O(2N) space complexity.
	
	fun min (a, b, c : int) : int
		var m : int;
	{
		m <- a;
		if b < m then m <- b;
		if c < m then m <- c;
		return m;
	}
	
	var A, B            : char[4096];
	var M               : int [2][4096];
	var al, bl, i, j, k : int;

{ $ main
	readString (4096, A);
	readString (4096, B);
	al <- strlen(A);
	bl <- strlen(B);
	j <- 0;
	while j <= bl do {
		M[0][j] <- j;
		j <- j+1;
	}
	i <- 1;
	while i <= al do {
		k <- i mod 2;
		M[k][0] <- i;
		j <- 1;
		while j <= bl do {
			if A[i-1] = B[j-1] then M[k][j] <- M[1-k][j-1];
			else                    M[k][j] <- min(1 + M[k][j-1],
			                                       1 + M[1-k][j],
			                                       2 + M[1-k][j-1]);
			j <- j+1;
		}
		i <- i+1;
	}
	writeInteger(M[al mod 2][bl]);
} $ main
