fun main () : nothing

	var p : int[409]; $ primes

	fun phi (n : int) : int $ Euler's phi function using Euler's product formula
		var i, r : int;
	{
		i <- 0; r <- n;
		while p[i] # 0 do { $ The actual condition we need to check here is p <= n but since we didn't generate any p > n we can't, instead there is always a 0 right after the last p <= n
			if n mod p[i] = 0 then
				r <- r div p[i] * (p[i]-1);
			i <- i+1;
		}
		return r;
	}

	fun Eratosthenes (n : int) : nothing
		var i, j : int;
	{
		i <- 2;
		$ the folowing line is required to make it work correctly if n is less than 5
		p[0] <- 0; p[1] <- 0; p[2] <- 0;
		while i <= n do { $ init
			p[i-2] <- i;
			i <- i+1;
		}
		i <- 2;
		while i*i <= n do { $ sieve
			if p[i-2] > 0 then {
				j <- i*i;
				while j <= n do {
					p[j-2] <- 0;
					j <- j+i;
				}
			}
			i <- i+1;
		}
		i <- 5; j <- 4;
		while i <= n do { $ remove 0s, i.e. 2 3 0 5 0 7 0 0 ... -> 2 3 5 7 11 13 ...
			p[j-2] <- p[i-2];
			p[i-2] <- 0;
			i <- i+1;
			j <- j+1;
			while p[i-2] = 0 and i <= n do i <- i+1;
		}
	}

	var n : int;

{ $ main
	n <- readInteger();
	if n-2 >= 409 then writeString("Error: not enough memory to run sieve"); $ notice that the max access is p[n-2]
	else {
		Eratosthenes(n);
		writeInteger(phi(n));
	}
	writeChar('\n');
} $ main
